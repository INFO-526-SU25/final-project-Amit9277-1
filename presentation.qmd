---
title: "Analytical Visualization on the History of Himalyan Expeditions "
subtitle: "INFO 526 - Summer 2025 - Final Project"
author: "Cat Xia and Amit Chawla"
title-slide-attributes:
  data-background-image: images/raimond-klavins-L6jxljMeUoo-unsplash.jpg
  data-background-size: stretch
  data-background-opacity: "0.7"
  data-slide-number: none
format:
  revealjs:
    theme:  ['data/customtheming.scss']
    smaller: true
    scrollable: true
editor: visual
execute:
  echo: false
---

```{r}
#| label: load-packages
#| include: false

# Load packages here
pacman::p_load(tidymodels,
               tidyverse,
               janitor,
               scales,
               stringr,
               ggthemes,
               ggrepel,
               patchwork,
               grid)

```

```{r}
#| label: setup
#| include: false

# Plot theme
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 20))

# For better figure resolution
knitr::opts_chunk$set(
  fig.retina = 3, 
  dpi = 300, 
  fig.width = 11, 
  fig.asp = 0.618 
  )
```

```{r}
#| label: load-data
#| include: false

tuesdata <- tidytuesdayR::tt_load('2025-01-21')

exped_tidy <- tuesdata$exped_tidy
exped_tidy <- clean_names(exped_tidy)
head(exped_tidy, n=10)

peaks_tidy <- tuesdata$peaks_tidy
```

## Introduction

This project explores intriguing patterns and insights into mountaineering expeditions in the Nepal Himalaya.

-   By analyzing an extensive dataset of Himalayan climbs, the project seeks to uncover relationships between the choices climbers make: -

    — such as their selected routes and expedition agencies.

    — and their chances of success or risk of fatalities.

-   The analysis particularly aims to shed light on how these factors vary across different nations and time periods, offering a deeper understanding of what influences expedition outcomes in one of the world’s most challenging environments.

## The Himalayan Database

-   Contains the History of Himalayan Mountaineering Expeditions from Tidytuesday, taken from the archive of Elizabeth Hawley on 'The Himalayan Dataset'.

-   Details peaks, expeditions, expedition related aspects, outcomes, and geographic data.

-   Analysis uses two tidy tibbles: peaks and expeditions.

-   `Note:` Expeditions dataset filtered to years 2020–2024 for manageable file size.

# Question 1

## Question 1:

Are certain routes favored by expeditions from particular nations, and do they have disparate success rates?

::::: columns
::: {.column width="50%"}
Introduction:

-   The idea is to find out if there is any affect on success or failure based on the chosen route.

-   Analysis truncates the low volume attempts to avoid outliers.
:::

::: {.column width="50%"}
Approach:

-   First I have calibrated the general census of top 4 peaks attempted by nations, to identify the general success rate of the peak.

-   Next, visualized each peak and success percentage of popular chosen routes by nation, in a bubble chart.

-   To finalize, the visualization and derive interpretation. I combined all 4 charts in one.
:::
:::::

## General Census

::::: columns
::: {.column width="30%"}
The general census shows that 3 out of top 4 peaks attempted for expedition shows fairly positive results around 90% success rate.

-   Now we will see what role does choice of route plays here....
:::

::: {.column width="70%"}
```{r}

exped_tidy_cleaned <- clean_names(exped_tidy)
peaks_tidy_cleaned <- clean_names(peaks_tidy)

pivoted_data <- exped_tidy_cleaned |>
  pivot_longer(
    cols = c(route1, route2, route3, route4, success1, success2, success3, success4),
    names_to = c(".value", "index"),
    names_pattern = "(route|success)(\\d+)"
  )

pivoted_data <- pivoted_data |>
  filter(!is.na(route))

pivoted_data <- pivoted_data |>
  mutate(route = str_replace_all(route, "S Col SE Ridge", "S Col-SE Ridge"))

summary_data <- pivoted_data |>
  group_by(peakid) |>
  summarize(
    attempts = n(),
    success_rate = (mean(success, na.rm = TRUE) * 100), # This remains NUMERIC for fill aesthetic
    .groups = 'drop' # Good practice to drop grouping after summarize
  ) |>
  arrange(desc(attempts)) |>
  slice_head(n = 4)

# Create a SEPARATE column for the label, formatted as a character string
summary_data$success_rate_label <- sprintf("%.1f%%", summary_data$success_rate)

# Join with peaks_tidy_cleaned to get peak names, keeping original peakid
summary_data <- summary_data |>
  left_join(select(peaks_tidy_cleaned, peakid, pkname), by = "peakid")

ggplot(summary_data, aes(x = reorder(pkname, -attempts), y = success_rate, fill = attempts)) +
  geom_col() +
  geom_text(aes(label = success_rate_label),
            vjust = -0.5,  # Position above bars
            color = "black") +
  scale_fill_viridis_c(
    option = "viridis",
    name = "Number of Attempts"
  ) +
  coord_cartesian(ylim = c(0, 100)) +  # Success rate is in percent (0-100)
  labs(
    x = "Peaks",
    y = "Success Rate (%)",
    title = "Success Rate of Top 4 Peaks \nAttempted by all Nations (2020-2024)",
    subtitle = "Bar height indicates success rate; color indicates attempts",
    caption = "Source: https://github.com/rfordatascience/tidytuesday"
  ) +
  theme_minimal(base_size = 14) +
   theme(
    plot.caption = element_text(hjust = 1)
  )
```
:::
:::::

## Plot Analysis

```{r}
#| label: Plot 1 (Everest) for second visualization

selected_peaks <- c("EVER", "AMAD", "LHOT", "MANA", "HIML")

pivoted_data_cleaned <- pivoted_data |>
  filter(!is.na(route) & !is.na(nation))

summary_data_with_combined_key <- pivoted_data_cleaned |>
  group_by(peakid, route, nation) |>
  summarize(
    attempts_on_route_per_nation = n(),
    success_rate_on_route = (mean(success, na.rm = TRUE) * 100),
    .groups = 'drop'
  ) |>
  mutate(peakid_route = paste(peakid, route, sep = " - ")) |>
  arrange(peakid, route, desc(attempts_on_route_per_nation))

ever_df <- summary_data_with_combined_key |>
  filter(peakid == 'EVER')

# Calculate total attempts per nation across all routes
total_attempts <- ever_df |>
  group_by(nation)|>
  summarise(total_attempts = sum(attempts_on_route_per_nation)) |>
  slice_max(order_by = total_attempts, n = 3)

# Get the top 3 nations
top_nations <- total_attempts$nation

# Filter the dataframe to include only the top 3 nations
ever_top3 <- ever_df |> 
  filter(nation %in% top_nations)

# Create the bubble chart
p1 <- ggplot(ever_top3, aes(x = route, y = success_rate_on_route)) +
  geom_point(aes(color = attempts_on_route_per_nation, size = attempts_on_route_per_nation),
             alpha = 0.7,
             position = "identity") +
  geom_text_repel(data = subset(ever_top3, attempts_on_route_per_nation >= 1),
                  aes(label = nation, color = attempts_on_route_per_nation),
                  size = 5,
                  box.padding = 0.7,
                  point.padding = 0.6,
                  min.segment.length = Inf) +
  scale_color_viridis_c(option = "turbo",
                        name = "Attempts on Route",
                        breaks = c(1, 10, 20, 30, 40),
                        limits = c(0, 40),
                        guide = "none") +
  scale_size_continuous(range = c(3, 15),
                        name = "Attempts on Route",
                        breaks = c(10, 20, 30),
                        limits = c(0, 40),
                        guide = "none")+
  annotate("text", y = 125, x = 0.7, label = "Everest", size = 5, fontface = "bold") +
  labs(x = NULL,
       y = "Success Rate (%)") +
  scale_y_continuous(breaks = seq(0, 100, by = 25)) +
  scale_x_discrete(labels = label_wrap(10)) +
  coord_cartesian(ylim = c(-5, 125)) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(hjust = 0.5, size = 9),
    legend.position = "none"
  )

```

```{r}
#| label: Plot 2 (Ama Dablam) for second visualization

amad_df <- summary_data_with_combined_key |>
  filter(peakid == 'AMAD')

# Calculate total attempts per nation across all routes
total_attempts <- amad_df |>
  group_by(nation)|>
  summarise(total_attempts = sum(attempts_on_route_per_nation)) |>
  slice_max(order_by = total_attempts, n = 3)

# Get the top 3 nations
top_nations <- total_attempts$nation

# Filter the dataframe to include only the top 3 nations
amad_top3 <- amad_df |> 
  filter(nation %in% top_nations)

# Create the bubble chart
p2 <- ggplot(amad_top3, aes(x = route, y = success_rate_on_route)) +
  geom_point(aes(color = attempts_on_route_per_nation, size = attempts_on_route_per_nation),
             alpha = 0.7,
             position = position_jitter(width = 0)) +
  geom_text_repel(data = subset(amad_top3, attempts_on_route_per_nation >= 1),
                  aes(label = nation, color = attempts_on_route_per_nation),
                  size = 5,
                  box.padding = 0.6,
                  point.padding = 0.8,
                  min.segment.length = Inf) +
  scale_color_viridis_c(option = "turbo",
                        name = "Attempts on Route",
                        breaks = c(1, 10, 20, 30, 40),
                        limits = c(0, 40),
                        guide = "none") +
  scale_size_continuous(range = c(3, 15),
                        name = "Attempts on Route",
                        breaks = c(10, 20, 30),
                        limits = c(0, 40),
                        guide = "none") +
  annotate("text", y = 120, x = 0.9, label = "Ama Dablam", size = 5, fontface = "bold") +
  labs(x = NULL,
       y = NULL) +
  scale_y_continuous(breaks = seq(0, 100, by = 25)) + # Adjusted seq start to 0 for clarity
  scale_x_discrete(labels = label_wrap(10)) +
  coord_cartesian(ylim = c(-5, 120)) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(hjust = 0.5, size = 9),
    legend.position = "none"
  )
```

```{r}
#| label: Plot 3 (Lhotse) for second visualization

lhot_df <- summary_data_with_combined_key |>
  filter(peakid == 'LHOT')

# Calculate total attempts per nation across all routes
total_attempts <- lhot_df |>
  group_by(nation)|>
  summarise(total_attempts = sum(attempts_on_route_per_nation)) |>
  slice_max(order_by = total_attempts, n = 3)

# Get the top 3 nations
top_nations <- total_attempts$nation

# Filter the dataframe to include only the top 3 nations
lhot_top3 <- lhot_df |> 
  filter(nation %in% top_nations)

# Create the bubble chart
p3 <- ggplot(lhot_top3, aes(x = route, y = success_rate_on_route)) +
  geom_point(aes(color = attempts_on_route_per_nation, size = attempts_on_route_per_nation),
             alpha = 0.6,
             position = "identity") +
  geom_text_repel(data = subset(lhot_top3, attempts_on_route_per_nation >= 1),
                  aes(label = nation, color = attempts_on_route_per_nation),
                  size = 5,
                  box.padding = 0.6,
                  point.padding = 0.8,
                  min.segment.length = Inf,
                  position = "identity") +
  scale_color_viridis_c(option = "turbo",
                        name = "Attempts on Route",
                        breaks = c(1, 10, 20, 30, 40),
                        limits = c(0, 40),
                        guide = "none") +
  scale_size_continuous(range = c(3, 15),
                        name = "Attempts on Route",
                        breaks = c(10, 20, 30),
                        limits = c(0, 40),
                        guide = "none")+
  annotate("text", y = 130, x = 0.6, label = "Lhotse", size = 5, fontface = "bold") +
  labs(x = "Route",
       y = "Success Rate (%)") +
  scale_y_continuous(breaks = seq(0, 100, by = 25)) +
  scale_x_discrete(labels = label_wrap(10)) +
  coord_cartesian(ylim = c(-5, 130)) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(hjust = 0.5, size = 9),
    legend.position = "none"
  )
```

```{r}
#| label: Plot 4 (Manaslu) for second visualization

mana_df <- summary_data_with_combined_key |>
  filter(peakid == 'MANA')

# Calculate total attempts per nation across all routes
total_attempts <- mana_df |>
  group_by(nation)|>
  summarise(total_attempts = sum(attempts_on_route_per_nation)) |>
  slice_max(order_by = total_attempts, n = 3)

# Get the top 3 nations
top_nations <- total_attempts$nation

# Filter the dataframe to include only the top 3 nations
mana_top3 <- mana_df |> 
  filter(nation %in% top_nations)

# Create the bubble chart
p4 <- ggplot(mana_top3, aes(x = route, y = success_rate_on_route)) +
  geom_point(aes(color = attempts_on_route_per_nation, size = attempts_on_route_per_nation),
             alpha = 0.7,
             position = "identity") +
  geom_text_repel(data = subset(mana_top3, attempts_on_route_per_nation >= 1),
                  aes(label = nation, color = attempts_on_route_per_nation),
                  size = 5,
                  box.padding = 0.6,
                  point.padding = 0.8,
                  min.segment.length = Inf,
                  position = "identity") +
  scale_color_viridis_c(option = "turbo",
                        name = "\n",
                        breaks = c(1, 10, 20, 30, 40),
                        limits = c(0, 40),
                        guide = guide_colorbar(direction = "horizontal", title.position = "top")) +
  scale_size_continuous(range = c(3, 15),
                        name = "                       Attempts on route metrix (size + color)",
                        breaks = c(1, 10, 20, 30, 40),
                        limits = c(0, 40),
                        guide = guide_legend(title.position = "top"))+
  annotate("text", y = 120, x = 0.55, label = "Manaslu", size = 5, fontface = "bold") +
  labs (x = "Route",
       y = NULL) +
  scale_y_continuous(breaks = seq(0, 100, by = 25)) +
  scale_x_discrete(labels = label_wrap(10)) +
  coord_cartesian(ylim = c(-5, 120)) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(hjust = 0.5, size = 9),
    legend.position = "none"
  )
```

```{r}
#| label: Combined all plots for second visualization

# Combine plots with patchwork
combined_plot <- (p1 + p2) / (p3 + p4) +
  plot_layout(guides = "collect") +
  plot_annotation(
    title = "National Route Preferences and Success Rates\nin High-Altitude Peak Expeditions (2020-2024)",
    subtitle = "Bubble Size and Color Show Attempts, with Success Rates\nfor Top 3 Nations Across Four Most Popular Peaks",
    caption = "Source: https://github.com/rfordatascience/tidytuesday",
    theme = theme(
      plot.title = element_text(face = "bold", size = 18, hjust = 0.2),
      plot.subtitle = element_text(size = 14, hjust = 0.2),
      plot.caption = element_text(size = 14)
    )
  ) &
  theme(
    legend.position = "bottom",
    legend.box = "horizontal",
    legend.title = element_text(size = 14, hjust = 0.5)
  )

plot(combined_plot)
```

## Observations

-   [**Dominant Route Preference:**]{.underline} A significant majority of attempts concentrated on a single, well-established route for this peak.
-   [**Marginal Alternate Success:**]{.underline} While other routes were attempted, their success rates or popularity were considerably lower, highlighting a clear preference for the primary path.
-   [**Strategic Path-Peak Selection:**]{.underline} Top-performing nations consistently favored a specific path-peak combination, indicating that **route selection is a critical determinant of expedition success**.
-   [**Inherent Route Bias:**]{.underline} The observed pattern reflects a historical trend where a particular route, proven over years, emerged as the most reliable for success by 2020-2024 dataset.

# Question 2

# Question 2:

Do certain Agencies have a higher number of member/personal deaths than others with respect to season/date?

::::: columns
::: {.column width="50%"}
Introduction:

-   Do Himalayan expidition fatality corellate with any Agencies? If so, further research could look into the safety guidelines of the more fatal agencies and why they occur.

-   Are fatalities more common in certain seasons?
:::

::: {.column width="50%"}
Approach:

-   First, look at number of fatal expeditions by agency

-   Next, visualize and compare agencies by percent fatality and season.

-   Lastly, see if the percent misrepresents the raw number.
:::
:::::

## Agencies that have at least 1 fatal expedition between 2021-2024

```{r data wrangling Q2}

#create new varialbes
exped_tidy <- exped_tidy |>
  mutate(
    "pmdeaths" = mdeaths/totmembers,
    "phdeaths" = hdeaths/tothired,
    "totdeaths" = (hdeaths+ mdeaths),
    "ptotdeaths" = totdeaths/(tothired + totmembers)
  )

#Filter for expeditions where at least one person died and ignore when agencies are NA
exped_tidy_deadly <- exped_tidy |>
  filter(pmdeaths > 0 | phdeaths > 0) |>
  filter(!is.na(agency))

#create a smaller dataframe that is easier to work with
exped_tidy_deadly <- exped_tidy_deadly |>
  select(year, season_factor, host_factor, nation, agency, totmembers, smtmembers, mdeaths, tothired, hdeaths, totdeaths, pmdeaths, phdeaths, ptotdeaths)
```

```{r graph death by agency Q2}

exped_tidy_deadly |>
  #graph by agency descending by bar and fill by count
  ggplot(aes(x = fct_rev(fct_infreq(agency)), fill = after_stat(count))) +
  geom_bar() +
  
  #flip coordinates
  coord_flip() +
  scale_y_continuous(breaks = c(0, 2, 4, 6, 8, 10)) +
  
  #color by increasing intensity of red
  scale_fill_gradient(low = "#ffce00", high = "darkred") +
  
  labs(
    title = "Number of expeditions through the Himalayas \nthat resulted in death by Agency",
    subtitle = "from 2021 - 2024",
    caption = "Source: Tidytuesday",
    x = NULL,
    y = "Number of expeditions that resulted in at least one death",
    fill = NULL
  ) +
  theme_minimal() +
  
  #get rid of background grid
  theme(
    legend.position = "none",
    panel.grid.minor = element_blank(),
    panel.grid.major.y = element_blank()
  )
```

## Zoom In: 2021

```{r data wrangling 2021}
#| include: FALSE

#filter for all deaths in 2021
deaths_2021 <- exped_tidy_deadly |>
  filter(year == 2021)

#filter by group and create a percent total death average for each agency
deaths_2021_av <- deaths_2021 %>%
  group_by(agency, season_factor) %>%
  summarise(avg_ptotdeaths = mean(ptotdeaths, na.rm = TRUE),
            .groups = "drop")

#takes the sum total death per agency
deaths_2021_raw <- deaths_2021 |>
  group_by(agency, season_factor) %>%
  summarize(total_deaths = sum(totdeaths), .groups = "drop")
deaths_2021_raw

```

::: panel-tabset
## 2021 Percent Deaths

```{r percent deaths 2021}
deaths_2021_av |>
  #graph agency descending by percent total deaths per agency and color by season
  ggplot(aes(x = fct_reorder(agency, avg_ptotdeaths, .desc = FALSE), y = avg_ptotdeaths, fill = season_factor)) +
  geom_col() +
  
  #coordinates set the same for each graph to easily compare
  coord_flip(ylim = c(0, 1)) +
  scale_fill_manual(values = c("orange", "lightgreen")) +
  
  labs(
    fill = "Season",
    x = "Trekking Agency",
    y = "Total Death",
    title = "Percent total deaths by Agency in 2021",
    caption = "Source: TidyTuesday",
    subtitle = "M is trekking member death, H is hired staff death"
  ) +
  #set manual labels for the x axis so that it reads as percent
  scale_y_continuous(
    breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1),
    labels = c("0%", "20%", "40%", "60%", "80%", "100%")
  ) +
  
  #create annotations for each expedition with the percent for member deaths and hired staff deaths to better understand the breakdown of each total percentage
  annotate("text", y = 0.2, x = 1, label = "M 6.6%") +
  annotate("text", y = 0.2, x = 2, label = "H 3.3%") +
  annotate("text", y = 0.3, x = 3, label = "Trek 1: M 54%") +
  annotate("text", y = 0.7, x = 3, label = "Trek 2: H 10%") +
  annotate("text", y = 0.3, x = 4, label = "M 20%") +
  annotate("text", y = 0.4, x = 5, label = "M 75%") +
  theme_minimal() +
  
  #gets rid of unencessary elements
  theme(
    axis.ticks.x = element_blank(),
    panel.grid = element_blank()
  )
```

## 2021 Actual Deaths

```{r sum deaths 2021}

deaths_2021_raw |>
  #graphs agency (descending) by the sum total deaths and colored by season
  ggplot(aes(x = fct_reorder(agency, total_deaths, .desc = FALSE), y = total_deaths, fill = season_factor)) +
  geom_col() +
  
  #coordinates set the same for each graph for easy comparison
  coord_flip(ylim = c(0, 5)) +
  scale_fill_manual(values = c("orange", "lightgreen")) +
  
  labs(
    fill = "Season",
    x = "Trekking Agency",
    y = "Total Deaths",
    title = "Percent total deaths by Agency in 2021",
    caption = "Source: TidyTuesday",
    subtitle = "M is trekking member death, H is hired staff death"
  ) +
  
  #manual y breaks
  scale_y_continuous(
    breaks = c(0, 1, 2, 3, 4, 5)
  ) +
  
  #annoations simplified by trek to improve readbility
  annotate("text", y = 4, x = 5, label = "Total Treks: 2") +
  theme_minimal() +
  
  #Clean up graph background
  theme(
    axis.ticks.x = element_blank(),
    panel.grid = element_blank()
  )
```
:::

## Zoom In: 2022

```{r data wrangling 2022}
#| include: FALSE

#Code copied and pasted from above with only dataset changed

deaths_2022 <- exped_tidy_deadly |>
  filter(year == 2022)

deaths_2022_av <- deaths_2022 %>%
  group_by(agency, season_factor) %>%
  summarise(avg_ptotdeaths = mean(ptotdeaths, na.rm = TRUE),
            .groups = "drop")

deaths_2022_raw <- deaths_2022 |>
  group_by(agency, season_factor) %>%
  summarize(total_deaths = sum(totdeaths), .groups = "drop")


```

::: panel-tabset
## 2022 Percent Deaths

```{r percent deaths 2022}

#code copied and pasted from above with only dataset and annotations changed

deaths_2022_av |>
  ggplot(aes(x = fct_reorder(agency, avg_ptotdeaths, .desc = FALSE), y = avg_ptotdeaths, fill = season_factor)) +
  geom_col() +
  coord_flip(ylim = c(0, 1)) +
  scale_fill_manual(values = c("orange", "lightgreen")) +
  labs(
    fill = "Season",
    x = "Trekking Agency",
    y = "Total Percent Death (Average)",
    title = "Percent total deaths by Agency in 2022",
    caption = "Source: TidyTuesday",
    subtitle = "M is trekking member death, H is hired staff death"
  ) +
  scale_y_continuous(
    breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1),
    labels = c("0%", "20%", "40%", "60%", "80%", "100%")
  ) +
  annotate("text", y = 0.2, x = 1, label = "H 20%") +
  annotate("text", y = 0.2, x = 2, label = "H 4.7%") +
  annotate("text", y = 0.2, x = 3, label = "M 7.6%") +
  annotate("text", y = 0.3, x = 4, label = "Trek 1: M 6.25%") +
  annotate("text", y = 0.7, x = 4, label = "Trek 2: H 10%") +
  annotate("text", y = 0.32, x = 4.8, label = "Trek 1: M 14.2%") +
  annotate("text", y = 0.32, x = 5.2, label = "Trek 2: H 6.25%") +
  annotate("text", y = 0.8, x = 5, label = "Trek 3: H 6.67%") +
  annotate("text", y = 0.25, x = 6, label = "M 20%") +
  annotate("text", y = 0.3, x = 7, label = "M 14.28%") +
  theme_minimal() +
  theme(
    axis.ticks.x = element_blank(),
    panel.grid = element_blank()
  )
```

## 2022 Actual Deaths

```{r sum deaths 2022}

#code copied and pasted from above with only dataset and annotations changed

deaths_2022_raw |>
  ggplot(aes(x = fct_reorder(agency, total_deaths, .desc = FALSE), y = total_deaths, fill = season_factor)) +
  geom_col() +
  coord_flip(ylim = c(0, 5)) +
  scale_fill_manual(values = c("orange", "lightgreen")) +
  labs(
    fill = "Season",
    x = "Trekking Agency",
    y = "Total Death",
    title = "Total deaths by Agency in 2022",
    caption = "Source: TidyTuesday",
    subtitle = "M is trekking member death, H is hired staff death"
  ) +
  scale_y_continuous(
    breaks = c(0, 1, 2, 3, 4, 5)
  ) +
  #annotate("text", y = 2, x = 1, label = "M 1") +
  #annotate("text", y = 2, x = 2, label = "H 1") +
  #annotate("text", y = 2, x = 3, label = "M 1") +
  #annotate("text", y = 2, x = 4, label = "M 1") +
  #annotate("text", y = 2, x = 5, label = "M 1") +
  #annotate("text", y = 1, x = 6, label = "Trek 1: M 1") +
  #annotate("text", y = 2.7, x = 6, label = "Trek 2: H 1") +
  #annotate("text", y = 4.5, x = 6, label = "Trek 3: H 1") +
  #annotate("text", y = 1, x = 7, label = "Trek 1: M 1") +
  #annotate("text", y = 3, x = 7, label = "Trek 2: H 1") +
  annotate("text", y = 4, x = 6, label = "Total Treks: 3") +
  annotate("text", y = 3, x = 7, label = "Total Treks: 2") +
  theme_minimal() +
  theme(
    axis.ticks.x = element_blank(),
    panel.grid = element_blank()
  )
```
:::

## Zoom In: 2023

```{r data wrangling 2023}
#| include: FALSE

#code copied and pasted from above with only dataset

deaths_2023 <- exped_tidy_deadly |>
  filter(year == 2023)

deaths_2023_av <- deaths_2023 %>%
  group_by(agency, season_factor) %>%
  summarise(avg_ptotdeaths = mean(ptotdeaths, na.rm = TRUE),
            .groups = "drop")

deaths_2023_raw <- deaths_2023 |>
  group_by(agency, season_factor) %>%
  summarize(total_deaths = sum(totdeaths), .groups = "drop")
```

::: panel-tabset
## 2023 Percent Deaths

```{r percent deaths 2023}

#code copied and pasted from above with only dataset and annotations changed

deaths_2023_av |>
  ggplot(aes(x = fct_reorder(agency, avg_ptotdeaths, .desc = FALSE), y = avg_ptotdeaths, fill = season_factor)) +
  geom_col() +
  coord_flip(ylim = c(0, 1)) +
  scale_fill_manual(values = c("orange", "lightgreen")) +
  labs(
    fill = "Season",
    x = "Trekking Agency",
    y = "Total Percent Death (Average)",
    title = "Percent total deaths by Agency in 2023",
    caption = "Source: TidyTuesday",
    subtitle = "M is trekking member death, H is hired staff death"
  ) +
  scale_y_continuous(
    breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1),
    labels = c("0%", "20%", "40%", "60%", "80%", "100%")
  ) +
  annotate("text", y = 0.2, x = 1, label = "M 5.8%") +
  annotate("text", y = 0.2, x = 2, label = "Trek 1: M 4.7%") +
  annotate("text", y = 0.5, x = 2, label = "Trek 2: M 6.7%") +
  annotate("text", y = 0.8, x = 2, label = "Trek 3: 6.3%") +
  annotate("text", y = 0.2, x = 3, label = "M 10%") +
  annotate("text", y = 0.2, x = 4, label = "M 1.66%") +
  annotate("text", y = 0.2, x = 5, label = "M 15.3%") +
  annotate("text", y = 0.2, x = 6, label = "H 10%") +
  annotate("text", y = 0.2, x = 7, label = "M 13.3%") +
  annotate("text", y = 0.2, x = 8, label = "M 20%") +
  annotate("text", y = 0.23, x = 9, label = "H 25%") +
  annotate("text", y = 0.25, x = 10, label = "M 16.7%") +
  annotate("text", y = 0.5, x = 11, label = "Trek 1: M 5.3%") +
  annotate("text", y = 0.8, x = 11, label = "Trek 2: M 33.3%") +
  annotate("text", y = 0.5, x = 12, label = "M 100%") +
  theme_minimal() +
  theme(
    axis.ticks.x = element_blank(),
    panel.grid = element_blank()
  )
```

## 2023 Total Deaths

```{r sum deaths 2023}

#code copied and pasted from above with only dataset and annotations changed

deaths_2023_raw |>
  ggplot(aes(x = fct_reorder(agency, total_deaths, .desc = FALSE), y = total_deaths, fill = season_factor)) +
  geom_col() +
  coord_flip(ylim = c(0, 5)) +
  scale_fill_manual(values = c("orange", "lightgreen")) +
  labs(
    fill = "Season",
    x = "Trekking Agency",
    y = "Total Death",
    title = "Total deaths by Agency in 2023",
    caption = "Source: TidyTuesday",
    subtitle = "M is trekking member death, H is hired staff death"
  ) +
  scale_y_continuous(
    breaks = c(0, 1, 2, 3, 4, 5)
  ) +
  annotate("text", y = 3, x = 6, label = "Total Treks: 2") +
  annotate("text", y = 3, x = 12, label = "Total Treks: 3") +
  theme_minimal() +
  theme(
    axis.ticks.x = element_blank(),
    panel.grid = element_blank()
  )
```
:::

## Zoom In: 2024

```{r data wrangling 2024}

#code copied and pasted from above with only dataset

deaths_2024 <- exped_tidy_deadly |>
  filter(year == 2024)

deaths_2024_av <- deaths_2024 %>%
  group_by(agency, season_factor) %>%
  summarise(avg_ptotdeaths = mean(ptotdeaths, na.rm = TRUE),
            .groups = "drop")

deaths_2024_raw <- deaths_2024 |>
  group_by(agency, season_factor) %>%
  summarize(total_deaths = sum(totdeaths), .groups = "drop")
```

::: panel-tabset
## 2024 Percent Deaths

```{r percent deaths 2024}

#code copied and pasted from above with only dataset and annotations changed

deaths_2024_av |>
  ggplot(aes(x = fct_reorder(agency, avg_ptotdeaths, .desc = FALSE), y = avg_ptotdeaths, fill = season_factor)) +
  geom_col() +
  coord_flip(ylim = c(0, 1)) +
  scale_fill_manual(values = "lightgreen") +
  labs(
    fill = "Season",
    x = "Trekking Agency",
    y = "Total Percent Death (Average)",
    title = "Percent total deaths by Agency in 2024",
    caption = "Source: TidyTuesday",
    subtitle = "M is trekking member death, H is hired staff death"
  ) +
  scale_y_continuous(
    breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1),
    labels = c("0%", "20%", "40%", "60%", "80%", "100%")
  ) +
  annotate("text", y = 0.2, x = 2, label = "M 6.7%") +
  annotate("text", y = 0.3, x = 1, label = "Trek 1: M 4.5% H 3.3%") +
  annotate("text", y = 0.7, x = 1, label = "Trek 2: H 3.2%") +
  annotate("text", y = 0.2, x = 3, label = "M 10%") +
  annotate("text", y = 0.2, x = 4, label = "M 11.1% H 2%") +
  annotate("text", y = 0.5, x = 5, label = "M 50%") +
  theme_minimal() +
  theme(
    axis.ticks.x = element_blank(),
    panel.grid = element_blank()
  )
```

## 2024 Total Deaths

```{r sum deaths 2024}

#code copied and pasted from above with only dataset and annotations changed

deaths_2024_raw |>
  ggplot(aes(x = fct_reorder(agency, total_deaths, .desc = FALSE), y = total_deaths, fill = season_factor)) +
  geom_col() +
  coord_flip(ylim = c(0, 5)) +
  scale_fill_manual(values = c("lightgreen")) +
  labs(
    fill = "Season",
    x = "Trekking Agency",
    y = "Total Death",
    title = "Total deaths by Agency in 2024",
    caption = "Source: TidyTuesday",
    subtitle = "M is trekking member death, H is hired staff death"
  ) +
  scale_y_continuous(
    breaks = c(0, 1, 2, 3, 4, 5)
  ) +
  annotate("text", y = 4, x = 4, label = "Total Treks: 2") +
  theme_minimal() +
  theme(
    axis.ticks.x = element_blank(),
    panel.grid = element_blank()
  )
```
:::

## Observations

-   Seven Summit Trekks had the most expeditions that had at least one fatality but often were not the most fatal per individual treks, and had low percentage of fatalities for each expedition.
-   Spring was significantly more deadly than Autumn
-   2022 and 2023 had more deaths than 2021 and 2024
-   Slightly more Hiker fatality than Staff fatality

# Conclusion, Limitations, and Future Directions

## Key Limitations

-   [**Data Quality**]{.underline}**:** Initial dataset required extensive cleanup due to inconsistencies (e.g., consolidated route information in one column instead of four).

-   [**Data Sparsity**]{.underline}**:** High variable count relative to entries limited conclusive findings.

## Future Directions

-   **In-depth Dataset Exploration:** Our team intends to expand our analysis by leveraging the more comprehensive data available in the original dataset's second edition, accessible at: <https://www.himalayandatabase.com/hbn2019.html> This will enable a deeper investigation into the insights observed in the current smaller dataset.

## Conclusion

-   The overwhelmingly dominant and historically proven route is the preferred and most successful path for this peak, with top-performing nations consistently prioritizing it due to its critical role in expedition success. Alternate routes are notably less effective.

-   If you go on a Himalayan expedition, don't do so with Seven Summit Treks in the Spring

## Images

![Image credit: Raimond Klavins, Unsplash Royalty Free Images.](images/raimond-klavins-L6jxljMeUoo-unsplash.jpg){fig-align="center" width="500"}

# Thank you.
